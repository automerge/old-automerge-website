"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8579],{7351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"reference/documents/values","title":"Simple Values","description":"All JSON primitive datatypes are supported in an Automerge document. In addition, JavaScript Date objects are supported.","source":"@site/docs/reference/documents/values.md","sourceDirName":"reference/documents","slug":"/reference/documents/values","permalink":"/docs/reference/documents/values","draft":false,"unlisted":false,"editUrl":"https://github.com/automerge/automerge.github.io/edit/main/docs/reference/documents/values.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Document Data Model","permalink":"/docs/reference/documents/"},"next":{"title":"Counters","permalink":"/docs/reference/documents/counters"}}');var o=n(4848),s=n(8453);const a={sidebar_position:2},c="Simple Values",i={},d=[];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"simple-values",children:"Simple Values"})}),"\n",(0,o.jsxs)(t.p,{children:["All JSON primitive datatypes are supported in an Automerge document. In addition, JavaScript ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",children:"Date objects"})," are supported."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.em,{children:["Remember, never modify ",(0,o.jsx)(t.code,{children:"currentDoc"})," directly, only ever change ",(0,o.jsx)(t.code,{children:"doc"})," inside the callback to ",(0,o.jsx)(t.code,{children:"Automerge.change"}),"!"]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:'newDoc = Automerge.change(currentDoc, (doc) => {\n  doc.property = "value"; // assigns a string value to a property\n  doc["property"] = "value"; // equivalent to the previous line\n  delete doc["property"]; // removes a property\n\n  doc.stringValue = "value";\n  doc.numberValue = 1;\n  doc.boolValue = true;\n  doc.nullValue = null;\n  doc.nestedObject = {}; // creates a nested object\n  doc.nestedObject.property = "value";\n  // you can also assign an object that already has some properties\n  doc.otherObject = { key: "value", number: 42 };\n\n  // By default, strings are collaborative sequences of characters. There are\n  // cases where you want a string which is not collaborative - URLs for example\n  // should generally be updated in one go. In this case you can use `ImmutableString`,\n  // which does not allow concurrent updates.\n  doc.atomicStringValue = new Automerge.ImmutableString("")\n});\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);