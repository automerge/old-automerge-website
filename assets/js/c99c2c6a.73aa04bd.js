"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7681],{4331:(e,o,r)=>{r.d(o,{R:()=>a,x:()=>c});var t=r(758);const n={},s=t.createContext(n);function a(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(s.Provider,{value:o},e.children)}},8425:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/repositories/index","title":"Repositories","description":"@automerge/automerge provides a JSON-like CRDT and a sync protocol, but this still leaves a lot of plumbing to do to use it in an application. @automerge/automerge-repo is that plumbing.","source":"@site/docs/reference/repositories/index.md","sourceDirName":"reference/repositories","slug":"/reference/repositories/","permalink":"/docs/reference/repositories/","draft":false,"unlisted":false,"editUrl":"https://github.com/automerge/automerge.github.io/edit/main/docs/reference/repositories/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Conflicts","permalink":"/docs/reference/documents/conflicts"},"next":{"title":"Storage","permalink":"/docs/reference/repositories/storage"}}');var n=r(6070),s=r(4331);const a={},c="Repositories",i={},d=[];function p(e){const o={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"repositories",children:"Repositories"})}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"@automerge/automerge"})," provides a JSON-like CRDT and a sync protocol, but this still leaves a lot of plumbing to do to use it in an application. ",(0,n.jsx)(o.a,{href:"https://www.npmjs.com/package/@automerge/automerge-repo",children:(0,n.jsx)(o.code,{children:"@automerge/automerge-repo"})})," is that plumbing."]}),"\n",(0,n.jsxs)(o.p,{children:["The entry point for an ",(0,n.jsx)(o.code,{children:"automerge-repo"})," based application is to create a ",(0,n.jsx)(o.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.Repo.html",children:(0,n.jsx)(o.code,{children:"Repo"})}),", passing it some form of ",(0,n.jsx)(o.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.StorageAdapter.html",children:(0,n.jsx)(o.code,{children:"StorageAdapter"})})," - which knows how to save data locally - and zero or more ",(0,n.jsx)(o.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.NetworkAdapter.html",children:(0,n.jsx)(o.code,{children:"NetworkAdapter"})}),"s, which know how to talk to other peers running ",(0,n.jsx)(o.code,{children:"automerge-repo"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["For example, this snippet creates a ",(0,n.jsx)(o.code,{children:"Repo"})," which listens for websocket connections and stores data in the local file system:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:'import { Repo } from "@automerge/automerge-repo";\nimport { WebSocketServer } from "ws";\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket";\nimport { NodeFSStorageAdapter } from "@automerge/automerge-repo-storage-nodefs";\n\nconst wss = new WebSocketServer({ noServer: true });\n\nconst repo = new Repo({\n  network: [new NodeWSServerAdapter(wss)],\n  storage: new NodeFSStorageAdapter(dir),\n});\n'})}),"\n",(0,n.jsxs)(o.p,{children:["A ",(0,n.jsx)(o.code,{children:"Repo"})," is a little like a database. It allows you to create and request ",(0,n.jsx)(o.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.DocHandle.html",children:(0,n.jsx)(o.code,{children:"DocHandle"})}),"s. Once you have a ",(0,n.jsx)(o.code,{children:"DocHandle"})," you can make changes to it and listen for changes received from other peers."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:'let doc = repo.create();\n// Make a change ourselves and send that to everyone else\ndoc.change((d) => (d.text = "hello world"));\n// Listen for changes from other peers\ndoc.on("change", ({ doc }) => {\n  console.log("new text is ", doc.text);\n});\n'})}),"\n",(0,n.jsx)(o.p,{children:"Any changes you make - or which are received from the network - will be stored in the attached storage adapter and distributed to other peers"})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);