"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5975],{1489:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"repositories/networking","title":"Networking","description":"There are many ways to talk to other peers. In automerge-repo this is captured by the NetworkAdapter interface. Unlike StorageAdapters a repository can have many (or zero) NetworkAdapters.","source":"@site/docs/repositories/networking.md","sourceDirName":"repositories","slug":"/repositories/networking","permalink":"/docs/repositories/networking","draft":false,"unlisted":false,"editUrl":"https://github.com/automerge/automerge.github.io/edit/main/docs/repositories/networking.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Storage","permalink":"/docs/repositories/storage"},"next":{"title":"DocHandles","permalink":"/docs/repositories/dochandles"}}');var s=t(4848),n=t(8453);const a={sidebar_position:2},i="Networking",c={},d=[{value:"Websockets",id:"websockets",level:2},{value:"Server",id:"server",level:3},{value:"Usage with <code>express</code>",id:"usage-with-express",level:4},{value:"Client",id:"client",level:3},{value:"MessageChannel",id:"messagechannel",level:2},{value:"BroadcastChannel",id:"broadcastchannel",level:2}];function l(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"networking",children:"Networking"})}),"\n",(0,s.jsxs)(r.p,{children:["There are many ways to talk to other peers. In ",(0,s.jsx)(r.code,{children:"automerge-repo"})," this is captured by the ",(0,s.jsx)(r.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo.NetworkAdapter.html",children:(0,s.jsx)(r.code,{children:"NetworkAdapter"})})," interface. Unlike ",(0,s.jsx)(r.code,{children:"StorageAdapter"}),"s a repository can have many (or zero) ",(0,s.jsx)(r.code,{children:"NetworkAdapter"}),"s."]}),"\n",(0,s.jsxs)(r.p,{children:['"network" is quite a broad term in ',(0,s.jsx)(r.code,{children:"automerge-repo"}),'. It really means "any other instance of ',(0,s.jsx)(r.code,{children:"Repo"}),' which I am communicating with by message passing". This means that as well as network adapters for obvious things like websockets, we also implement network adapters for less traditional channels such as ',(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel",children:(0,s.jsx)(r.code,{children:"MessageChannel"})})," or ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",children:(0,s.jsx)(r.code,{children:"BroadcastChannel"})}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"websockets",children:"Websockets"}),"\n",(0,s.jsxs)(r.p,{children:["The websocket ",(0,s.jsx)(r.code,{children:"NetworkAdapter"})," has two parts. This is because the websocket protocol requires a server and a client. The parts are named ",(0,s.jsx)(r.code,{children:"NodeWSServerAdapter"})," and ",(0,s.jsx)(r.code,{children:"BrowserWebsocketClientAdapter"}),", but don't take these names too seriously, they will both work in a browser or in Node."]}),"\n",(0,s.jsx)(r.h3,{id:"server",children:"Server"}),"\n",(0,s.jsxs)(r.p,{children:["The server side of the adapter is ",(0,s.jsx)(r.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo_network_websocket.NodeWSServerAdapter.html",children:(0,s.jsx)(r.code,{children:"NodeWSServerAdapter"})}),", which should be used in combination with the ",(0,s.jsx)(r.a,{href:"https://www.npmjs.com/package/ws",children:(0,s.jsx)(r.code,{children:"ws"})})," library."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { WebSocketServer } from "ws";\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket";\n\nconst wss = new WebSocketServer({ port: 8080 });\nconst adapter = new NodeWSServerAdapter(wss);\n'})}),"\n",(0,s.jsxs)(r.h4,{id:"usage-with-express",children:["Usage with ",(0,s.jsx)(r.code,{children:"express"})]}),"\n",(0,s.jsxs)(r.p,{children:["Often you aren't running the websocket server as a standalone thing but instead as part of an existing HTTP server. Here's an example of such a situation in an ",(0,s.jsx)(r.code,{children:"express"})," app."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { WebSocketServer } from "ws";\nimport { NodeWSServerAdapter } from "@automerge/automerge-repo-network-websocket";\nimport express from "express";\n\nconst wss = new WebSocketServer({ noServer: true });\nconst server = express();\nserver.on("upgrade", (request, socket, head) => {\n  wss.handleUpgrade(request, socket, head, (socket) => {\n    wss.emit("connection", socket, request);\n  });\n});\nconst adapter = new NodeWSServerAdapter(wss);\nserver.listen(8080);\n'})}),"\n",(0,s.jsx)(r.h3,{id:"client",children:"Client"}),"\n",(0,s.jsxs)(r.p,{children:["The client side of the connection is ",(0,s.jsx)(r.a,{href:"https://automerge.org/automerge-repo/classes/_automerge_automerge_repo_network_websocket.BrowserWebSocketClientAdapter.html",children:(0,s.jsx)(r.code,{children:"BrowserWebsocketClientAdapter"})}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { BrowserWebSocketClientAdapter } from "@automerge/automerge-repo-network-websocket";\n\nconst network = new BrowserWebSocketClientAdapter("ws://localhost:3030");\n'})}),"\n",(0,s.jsx)(r.h2,{id:"messagechannel",children:"MessageChannel"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://automerge.org/automerge-repo/modules/_automerge_automerge_repo_network_messagechannel.html",children:(0,s.jsx)(r.code,{children:"@automerge/automerge-repo-network-messagechannel"})})," is a ",(0,s.jsx)(r.code,{children:"NetworkAdapter"})," for communicating between processes within the same browser using a ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel",children:(0,s.jsx)(r.code,{children:"MessageChannel"})}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { MessageChannelNetworkAdapter } from "@automerge/automerge-repo-network-messagechannel";\nimport { Repo } from "@automerge/automerge-repo";\n\nconst { port1: leftToRight, port2: rightToLeft } = new MessageChannel();\nconst rightToLeft = new MessageChannelNetworkAdapter(rightToLeft);\nconst leftToRight = new MessageChannelNetworkAdapter(leftToRight);\n\nconst left = new Repo({\n  network: [leftToRight],\n});\nconst right = new Repo({\n  network: [rightToLeft],\n});\n'})}),"\n",(0,s.jsx)(r.h2,{id:"broadcastchannel",children:"BroadcastChannel"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.a,{href:"https://automerge.org/automerge-repo/modules/_automerge_automerge_repo_network_broadcastchannel.html",children:(0,s.jsx)(r.code,{children:"@automerge/automerge-repo-network-broadcastchannel"})})," is a ",(0,s.jsx)(r.code,{children:"NetworkAdapter"})," for communicating between processes in the same browser using a ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",children:(0,s.jsx)(r.code,{children:"BroadcastChannel"})}),". This will in general be quite inefficient because the sync protocol is point-to-point so even though ",(0,s.jsx)(r.code,{children:"BroadcastChannel"})," is a ",(0,s.jsx)(r.em,{children:"broadcast"})," channel, we still have to duplicate each message for every peer in the channel. It's better to use ",(0,s.jsx)(r.code,{children:"MessageChannel"})," if you can, but ",(0,s.jsx)(r.code,{children:"BroadcastChannel"})," is good in a pinch."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { BroadcastChannelNetworkAdapter } from "@automerge/automerge-repo-network-broadcastchannel";\n\nconst network = new BroadcastChannelNetworkAdapter();\n'})})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>i});var o=t(6540);const s={},n=o.createContext(s);function a(e){const r=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(n.Provider,{value:r},e.children)}}}]);